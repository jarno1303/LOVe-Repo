{% extends "base.html" %}

{% block title %}Harjoitus - LOVe Enhanced{% endblock %}

{% block head_extra %}
<style>
    .quiz-container { max-width: 800px; margin: 0 auto; }
    .option-btn { text-align: left; white-space: normal; transition: background-color 0.2s, border-color 0.2s; }
    .explanation-box { background: #f8f9fa; border-left: 4px solid #007bff; padding: 15px; margin-top: 15px; border-radius: 0 8px 8px 0; }
    .correct-answer { background-color: #d4edda !important; border-color: #c3e6cb !important; color: #155724 !important; }
    .incorrect-answer { background-color: #f8d7da !important; border-color: #f5c6cb !important; color: #721c24 !important; }
    .options-disabled .option-btn { pointer-events: none; }
    .progress-info { background: linear-gradient(45deg, #007bff, #6610f2); color: white; padding: 15px; border-radius: 8px; margin-bottom: 20px; }
    .quiz-card { border: none; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); border-radius: 12px; overflow: hidden; }
    .quiz-header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; }
    .loading-spinner { width: 3rem; height: 3rem; margin: 2rem auto; }
    .distractor-modal .modal-content { border: 3px solid #ffc107; border-radius: 12px; box-shadow: 0 10px 30px rgba(255, 193, 7, 0.3); }
    .distractor-header { background: linear-gradient(45deg, #ffc107, #ff8c00); color: white; border-bottom: none; }
    .distractor-scenario { background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 15px; margin: 15px 0; font-style: italic; }
    .distractor-option { margin: 8px 0; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; cursor: pointer; transition: all 0.3s; }
    .distractor-option:hover { border-color: #ffc107; background-color: #fff3cd; }
    .distractor-option.selected { border-color: #ffc107; background-color: #fff3cd; }
    .distractor-feedback { margin-top: 15px; padding: 15px; border-radius: 8px; }
    .distractor-feedback.correct { background-color: #d4edda; border: 1px solid #c3e6cb; color: #155724; }
    .distractor-feedback.incorrect { background-color: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }
</style>
{% endblock %}

{% block content %}
<div class="container mt-4">
    <div id="loading-screen" class="text-center">
        <div class="quiz-card">
            <div class="quiz-header"><h2>üéØ Ladataan harjoitusta...</h2></div>
            <div class="card-body">
                <div class="loading-spinner spinner-border text-primary" role="status"><span class="visually-hidden">Ladataan...</span></div>
                <p class="mt-3">Valmistellaan kysymyksi√§ sinulle</p>
            </div>
        </div>
    </div>

    <div id="error-screen" class="text-center d-none">
        <div class="quiz-card">
            <div class="quiz-header bg-danger"><h2>‚ùå Virhe</h2></div>
            <div class="card-body">
                <p id="error-message">Virhe kysymysten lataamisessa. Yrit√§ my√∂hemmin uudelleen.</p>
                <button class="btn btn-primary" onclick="location.reload()">üîÑ Yrit√§ uudelleen</button>
                <a href="{{ url_for('dashboard_route') }}" class="btn btn-secondary ms-2">‚Üê Palaa</a>
            </div>
        </div>
    </div>

    <div id="question-screen" class="d-none">
        <div class="quiz-container">
            <div class="progress-info">
                <div class="d-flex justify-content-between align-items-center">
                    <span id="progress-text">Kysymys 1 / 10</span>
                    <span>üìö {{ category if category else 'Kaikki kategoriat' }}</span>
                </div>
            </div>
            <div class="quiz-card">
                <div class="quiz-header"><h4 id="question-container">Kysymyst√§ ladataan...</h4></div>
                <div class="card-body">
                    <div id="options-container" class="d-grid gap-2"></div>
                    <div id="explanation-container" class="d-none">
                        <div class="explanation-box">
                            <h6>üí° Selitys:</h6>
                            <p id="explanation-text"></p>
                        </div>
                    </div>
                    <div class="text-center mt-3">
                        <button id="next-button" class="btn btn-primary btn-lg d-none" onclick="nextQuestion()">Seuraava kysymys ‚Üí</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="results-screen" class="d-none">
        <div class="quiz-card">
            <div class="quiz-header"><h2>üéâ Harjoitus valmis!</h2></div>
            <div class="card-body text-center">
                <div class="row">
                    <div class="col-md-4"><h3 id="final-score" class="text-primary">0/0</h3><p class="text-muted">Oikeat vastaukset</p></div>
                    <div class="col-md-4"><h3 id="final-percentage" class="text-success">0%</h3><p class="text-muted">Onnistumisprosentti</p></div>
                    <div class="col-md-4"><h3 id="final-time" class="text-info">0s</h3><p class="text-muted">Kokonaisaika</p></div>
                </div>
                <div class="mt-4">
                    <button class="btn btn-success me-2" onclick="startNewQuiz()">üîÑ Uusi harjoitus</button>
                    <a href="{{ url_for('dashboard_route') }}" class="btn btn-secondary">‚Üê Palaa</a>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade distractor-modal" id="distractorModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header distractor-header"><h5 class="modal-title">‚ö†Ô∏è Keskeytys l√§√§kkeenjaossa</h5></div>
            <div class="modal-body">
                <div class="alert alert-warning"><strong>üè• Tilanne:</strong> Olet jakamassa l√§√§kkeit√§ ja tapahtuu seuraava tilanne:</div>
                <div class="distractor-scenario" id="distractor-scenario"></div>
                <p><strong>Miten toimit?</strong></p>
                <div id="distractor-options"></div>
                <div id="distractor-feedback" class="d-none"></div>
            </div>
            <div class="modal-footer">
                <button type="button" id="submit-distractor" class="btn btn-warning" onclick="submitDistractor()">Vastaa</button>
                <button type="button" id="continue-quiz" class="btn btn-primary d-none" data-bs-dismiss="modal">Jatka harjoitusta</button>
            </div>
        </div>
    </div>
</div>

<script>
    let questions = [];
    let currentQuestionIndex = 0;
    let score = 0;
    let startTime = Date.now();
    let questionStartTime = Date.now();
    let selectedDistractorOption = null;
    let currentDistractor = null;
    let distractorModalInstance = null;

    const elements = {
        loadingScreen: document.getElementById('loading-screen'),
        errorScreen: document.getElementById('error-screen'),
        questionScreen: document.getElementById('question-screen'),
        resultsScreen: document.getElementById('results-screen'),
        progressText: document.getElementById('progress-text'),
        questionContainer: document.getElementById('question-container'),
        optionsContainer: document.getElementById('options-container'),
        explanationContainer: document.getElementById('explanation-container'),
        nextButton: document.getElementById('next-button'),
        errorMessage: document.getElementById('error-message')
    };

    document.addEventListener('DOMContentLoaded', function() {
        console.log('Practice sivu ladattu, aloitetaan kysymysten haku');
        fetchQuestions();
    });

    function showScreen(screenName, message = '') {
        ['loading', 'error', 'question', 'results'].forEach(name => {
            const screenEl = document.getElementById(name + '-screen');
            if(screenEl) screenEl.classList.add('d-none');
        });
        
        const screenToShow = document.getElementById(screenName + '-screen');
        if (screenToShow) {
            screenToShow.classList.remove('d-none');
            if (message && elements.errorMessage) {
                elements.errorMessage.textContent = message;
            }
        }
    }

    async function fetchQuestions() {
        try {
            const urlParams = new URLSearchParams(window.location.search);
            const categories = urlParams.getAll('categories').join(',');
            const difficulties = urlParams.getAll('difficulties').join(',');
            const limit = urlParams.get('count') || '10';
            
            const response = await fetch(`/api/questions?limit=${limit}&category=${encodeURIComponent(categories)}&difficulties=${encodeURIComponent(difficulties)}`);
            if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            
            const data = await response.json();
            if (!data.questions || data.questions.length === 0) throw new Error('Ei kysymyksi√§ saatavilla valituilla kriteereill√§.');
            
            questions = data.questions;
            startTime = Date.now();
            showScreen('question');
            displayCurrentQuestion();
        } catch (error) {
            console.error('Virhe kysymysten haussa:', error);
            showScreen('error', `Virhe kysymysten lataamisessa: ${error.message}`);
        }
    }

    function displayCurrentQuestion() {
        if (currentQuestionIndex >= questions.length) {
            displayResults();
            return;
        }
        const question = questions[currentQuestionIndex];
        if (!question) {
            showScreen('error', 'Virhe kysymyksen n√§ytt√§misess√§.');
            return;
        }

        elements.progressText.innerText = `Kysymys ${currentQuestionIndex + 1} / ${questions.length}`;
        elements.questionContainer.innerText = question.question;
        elements.optionsContainer.innerHTML = '';
        elements.optionsContainer.classList.remove('options-disabled');

        question.options.forEach((option, index) => {
            const button = document.createElement('button');
            button.innerHTML = `${String.fromCharCode(65 + index)}. ${option}`;
            button.className = 'btn btn-outline-primary option-btn p-3';
            button.dataset.index = index;
            button.onclick = (event) => handleAnswerSelection(event);
            elements.optionsContainer.appendChild(button);
        });

        elements.explanationContainer.classList.add('d-none');
        elements.nextButton.classList.add('d-none');
        questionStartTime = Date.now();

        if (currentQuestionIndex > 0) {
            checkForDistractor();
        }
    }

    async function checkForDistractor() {
        try {
            console.log("Tarkistetaan h√§iri√∂tekij√§...");
            const response = await fetch('/api/check_distractor');
            const data = await response.json();
            
            if (data.success && data.distractor) {
                console.log('H√§iri√∂tekij√§ saatu:', data.distractor);
                const delay = 2000 + Math.random() * 4000;
                setTimeout(() => showDistractor(data.distractor), delay);
            } else {
                console.log("Ei h√§iri√∂tekij√§√§.");
            }
        } catch (error) {
            console.error('H√§iri√∂tekij√§n tarkistus ep√§onnistui:', error);
        }
    }

    async function handleAnswerSelection(event) {
        const selectedIndex = parseInt(event.target.dataset.index);
        const question = questions[currentQuestionIndex];
        const timeTaken = Date.now() - questionStartTime;
        
        elements.optionsContainer.classList.add('options-disabled');
        
        const buttons = elements.optionsContainer.querySelectorAll('.option-btn');
        buttons.forEach((btn, index) => {
            if (index === question.correct) btn.classList.add('correct-answer');
            else if (index === selectedIndex) btn.classList.add('incorrect-answer');
        });
        
        if (selectedIndex === question.correct) score++;
        
        elements.explanationContainer.classList.remove('d-none');
        document.getElementById('explanation-text').innerText = question.explanation;
        elements.nextButton.classList.remove('d-none');
        
        await submitAnswer(question.id, question.options[selectedIndex], timeTaken);
    }

    async function submitAnswer(questionId, selectedOptionText, timeTaken) {
        try {
            await fetch('/api/submit_answer', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    question_id: questionId,
                    selected_option_text: selectedOptionText,
                    time_taken: timeTaken
                })
            });
        } catch (error) {
            console.error('Virhe vastauksen l√§hett√§misess√§:', error);
        }
    }

    function nextQuestion() {
        currentQuestionIndex++;
        displayCurrentQuestion();
    }

    function displayResults() {
        const totalTime = Math.round((Date.now() - startTime) / 1000);
        const percentage = questions.length > 0 ? Math.round((score / questions.length) * 100) : 0;
        
        document.getElementById('final-score').textContent = `${score}/${questions.length}`;
        document.getElementById('final-percentage').textContent = `${percentage}%`;
        document.getElementById('final-time').textContent = `${totalTime}s`;
        
        showScreen('results');
    }

    function startNewQuiz() {
        questions = [];
        currentQuestionIndex = 0;
        score = 0;
        showScreen('loading');
        fetchQuestions();
    }

    function showDistractor(distractor) {
        if (!distractorModalInstance) {
            distractorModalInstance = new bootstrap.Modal(document.getElementById('distractorModal'));
        }
        
        currentDistractor = distractor;
        selectedDistractorOption = null;
        
        document.getElementById('distractor-scenario').textContent = distractor.scenario;
        const optionsContainer = document.getElementById('distractor-options');
        optionsContainer.innerHTML = '';
        
        distractor.options.forEach((option, index) => {
            const div = document.createElement('div');
            div.className = 'distractor-option';
            div.textContent = option;
            div.onclick = () => selectDistractorOption(index);
            optionsContainer.appendChild(div);
        });
        
        document.getElementById('distractor-feedback').classList.add('d-none');
        document.getElementById('submit-distractor').classList.remove('d-none');
        document.getElementById('continue-quiz').classList.add('d-none');
        
        distractorModalInstance.show();
    }

    function selectDistractorOption(index) {
        selectedDistractorOption = index;
        document.querySelectorAll('.distractor-option').forEach(option => option.classList.remove('selected'));
        document.querySelectorAll('.distractor-option')[index].classList.add('selected');
    }

    async function submitDistractor() {
        if (selectedDistractorOption === null) return;
        
        try {
            const response = await fetch('/api/submit_distractor', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    scenario: currentDistractor.scenario,
                    user_choice: selectedDistractorOption,
                    response_time: 5000 
                })
            });
            const result = await response.json();
            
            const feedback = document.getElementById('distractor-feedback');
            const isCorrect = result.is_correct;
            
            feedback.className = `distractor-feedback ${isCorrect ? 'correct' : 'incorrect'}`;
            feedback.innerHTML = `<strong>${isCorrect ? '‚úÖ Oikein!' : '‚ùå V√§√§rin!'}</strong><br>${isCorrect ? 'Hyv√§ ratkaisu!' : 'L√§√§kkeenjaossa tulee v√§ltt√§√§ keskeytyksi√§.'}`;
            feedback.classList.remove('d-none');
            
            document.getElementById('submit-distractor').classList.add('d-none');
            document.getElementById('continue-quiz').classList.remove('d-none');
        } catch (error) {
            console.error('Virhe h√§iri√∂tekij√§vastauksen l√§hett√§misess√§:', error);
        }
    }
</script>
{% endblock %}